" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=1 foldmethod=marker foldopen+=search:
"
"   Robin Pyon's VIM config
"
" }

" Plugins (NeoBundle) {

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
  set runtimepath+=~/.nvim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.nvim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'                 " Required for NeoBundle

" Deps
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite.vim'
" NeoBundle 'Shougo/denite.nvim'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'chriskempson/base16-vim'                   " Base 16 color theme
NeoBundle 'sheerun/vim-polyglot'                      " Syntax and indent support for most languages
NeoBundle 'danro/rename.vim'
NeoBundle 'bling/vim-airline'                         " Statusbar
NeoBundle 'dkprice/vim-easygrep'
NeoBundle 'easymotion/vim-easymotion'
NeoBundle 'editorconfig/editorconfig-vim'             " .editorconfig support
NeoBundle 'ervandew/supertab'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'justinmk/vim-gtfo'                         " Go to terminal or file manager
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'mattn/emmet-vim'                           " Emmet support
NeoBundle 'mhinz/vim-signify'
NeoBundle 'mileszs/ack.vim'
" NeoBundle 'osyo-manga/unite-quickfix'
NeoBundle 'osyo-manga/vim-anzu'
NeoBundle 'posva/vim-vue'                             " Vue (syntax)
NeoBundle 'benekastah/neomake'                        " Syntastic-like functionality for neovim
NeoBundle 'tommcdo/vim-exchange'
NeoBundle 'tomtom/tcomment_vim'                       " File type specific comments
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'                        " Git wrapper
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'                        " Surround key mappings
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'Shougo/deoplete.nvim'                      " Autocompletion
" NeoBundle 'Shougo/neoyank.vim'                        " Yank history
NeoBundle 'Shougo/vimfiler.vim'                       " File explorer
NeoBundle 'SirVer/ultisnips'                          " Snippets
NeoBundle 'vim-airline/vim-airline-themes'            " (Requires vim-airline) Color themes
NeoBundle 'schickling/vim-bufonly'                    " Close all buffers except the current one

" Filetype plugins:
NeoBundle 'mxw/vim-jsx'                               " React JSX (syntax + indenting)
NeoBundle 'tikhomirov/vim-glsl'                       " GLSL (syntax)


" Unused:
" NeoBundle 'evanmiller/nginx-vim-syntax'               " Nginx (syntax)
" NeoBundle 'pangloss/vim-javascript'                   " JavaScript (synax + indenting)
" NeoBundle 'chrisbra/Colorizer'
" NeoBundle 'rstacruz/vim-hyperstyle'
" NeoBundle 'milkypostman/vim-togglelist'
" - Dash:
" NeoBundle 'rizzatti/dash.vim'
" - Tags:
" NeoBundle 'majutsushi/tagbar'
" NeoBundle 'xolox/vim-misc'
" NeoBundle 'xolox/vim-easytags'
" NeoBundle 'marijnh/tern_for_vim'
" NeoBundle 'szw/vim-tags'

call neobundle#end()

filetype plugin indent on                             " Required for NeoBundle

" Prompt to install uninstalled bundles on startup
NeoBundleCheck

" }


" Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
" If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


" General {
    filetype plugin indent on           " automatically detect file types
    set noerrorbells                    " disable error bells
    set vb t_vb=                        " disable visual / audio bells for non error events (e.g. pressing ESC, edge scrolling)
    set shm+=I                          " hide startup message
    set synmaxcol=200                   " limit highlighting so vim doesn't choke on minified files

    set foldmethod=indent

    " Source .vimrc when saved
    " au BufWritePost .vimrc source ~/.vimrc
    augroup myvimrchooks
      au!
      au BufWritePost .vimrc,.vimrc.symlink source $MYVIMRC

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      au BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \   exe "normal g`\"" |
          \ endif
    augroup END
" }

" Vim UI {

  " Colors
  syntax on                           " enable syntax highlighting
  set background=dark                 " assume a dark background

  " Folding
  set foldenable                      " enable folding
  set foldlevelstart=10               " open most folds by default
  " set foldmethod=indent
  set foldnestmax=3                   " limit nested fold levels
  set foldopen+=search,undo           " open folds on specific commands

  " Indenting + Word wrap
  set linebreak                       " only wrap at word boundaries
  set shiftwidth=2                    " number of spaces to use for autoindenting
  set smartindent                     " automatically inserts indentation in some cases
  set wrap                            " wrap visually, rather than changing text in the buffer

  " Search
  set ignorecase                      " case insensitive search if search is all lowercase
  set smartcase                       " case sensitive search if search contains uppercase characters

  " Spaces & Tabs
  set expandtab                       " use spaces in place of tab characters
  set softtabstop=2                   " number of spaces to use when pressing <tab> and pressing backspace
  set tabstop=2                       " the width of a tab in spaces

  " Splits
  set splitright                      " new horizontal splits on the right
  set splitbelow                      " new vertical splits on the bottom

  " TODO: organize
  set clipboard=unnamed               " use system clipboard as default register
  set colorcolumn=85                  " draw vertical colored column"
  set cpoptions+=$
  " set cursorline                      " highlight current line (can be very slow)
  set diffopt=vertical                " default vimdiff to vertical split
  set listchars=tab:▸\ ,eol:¬         " set custom characters for non printable elements
  set number                          " show line numbers
  set nolist                          " hide hidden characters
  set showmatch                       " highlight matching parentheses
  set textwidth=0
  set wildignore=*~,.git,tmp,*.log
  set wildmode=list:longest,full

  " Change cursor type when entering and exiting insert mode
  if has('cursorshape')
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
" }

" Autogroups {

  augroup configgroup

    " Clear autocommands for current group
    au!

    " Arduino
    au BufRead,BufNewFile *.ino,*.pde set filetype=cpp

    " Crontab
    au FileType crontab set nobackup nowritebackup

    " GLSL
    au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl,*.vshader,*.fshader setf glsl

    " HAML
    au BufRead,BufNewFile *.hamlc set ft=haml

    " HTML
    au BufRead,BufNewFile *.hbs setf html

    " JavaScript
    au BufRead,BufNewFile *.ejs,*.es6,*.json setf javascript

    " Ruby
    au BufEnter,BufRead,BufNewFile *.json.rabl,*.rabl,*.json_builder,*.assetfile,Rakefile,Assetfile,Guardfile setf ruby

    " Vue
    " au BufRead,BufNewFile *.vue setf vue

    " .htaccess
    au BufNewFile,BufRead .htaccess setf apache

    " On save: remove trailing whitespaces and ^M chars
    au FileType c,cpp,java,php,javascript,python,twig,xml,yml au BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

    " Replicate ctrl-p style navigation
    au FileType unite call s:unite_settings()

    " On save: run Neomake
    au! BufWritePost * Neomake

  augroup END

" }

" Key mappings {

    let mapleader = ","                 " change the mapleader from \ to ,

    nnoremap <space> :

    " Easy navigation between windows
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    " Buffer navigation
    nnoremap <C-j> :bprevious<CR>
    nnoremap <C-k> :bnext<CR>
    nnoremap <C-c> :Bdelete<CR>

    " Wrapped lines goes down/up to next row, rather than next line in file.
    nnoremap j gj
    nnoremap k gk

    " Properly interpret arrow keys when run within a tmux session
    if &term =~ '^screen'
        execute "set <xUp>=\e[1;*A"
        execute "set <xDown>=\e[1;*B"
        execute "set <xRight>=\e[1;*C"
        execute "set <xLeft>=\e[1;*D"
    endif

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    " Use tidy when using the = operator
    " http://vim.wikia.com/wiki/Cleanup_your_HTML#Using_tidy_for_html_files
    " TODO: what is setlocal?
    " :setlocal equalprg=tidyp\ -indent\ -quiet\ --indent-spaces\ 4\ --show-body-only\ 1\ --show-errors\ 0\ --tidy-mark\ 0\ --wrap\ 0

    " Easy access to commonly accessed rc files
    nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
    nnoremap <silent> <leader>ez :e ~/.zshrc<CR>

    " Close buffer but don't close split
    nmap <leader>d :b#<bar>bd#<CR>

    " Vimgrep and place cursor in correct position
    nnoremap <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

    " Toggle display of invisible / non-printable characters
    nnoremap <silent> <leader>i :set list!<CR>

    " Preserve indentation while pasting text from the OS X clipboard
    noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

    " Search and replace word at cursor
    nnoremap <leader>s :%s/\<<C-r><C-w>\>/

    " Open location window
    nmap <Leader><Space>o :lopen<CR>
    " Close location window
    nmap <Leader><Space>c :lclose<CR>
    " Close all location windows
    " nmap <Leader><Space>c :windo if &buftype == "quickfix" || &buftype == "locationlist" | lclose | endif<CR>
    " Go to current error/warning
    nmap <Leader><Space>, :ll<CR>
    " Next error/warning
    nmap <Leader><Space>n :lnext<CR>
    " Previous error/warning
    nmap <Leader><Space>p :lprev<CR>


    " Tidy visually selected lines (indenting, quiet mode, no logging)
    " http://vim.wikia.com/wiki/Cleanup_your_HTML
    " vnoremap <leader>t :!tidy -q -i --show-errors 0<CR>

    vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

    " Yank text to the OS X clipboard
    noremap <leader>y "*y
    noremap <leader>yy "*Y

    " Clearing highlighted search
    nmap <silent> <leader>/ :nohlsearch<CR>

    " Enable shift-tab to outdent in normal and insert mode
    nmap <S-Tab> <<
    imap <S-Tab> <Esc><<i

    " Allow in/exdenting with tab and single angled quotes, while retaining visual selection
    vnoremap > >gv
    vnoremap < <gv
    vnoremap <Tab> >gv
    vnoremap <S-Tab> <gv

    " Close all open buffers
    command! Bda bufdo bd

    " Open current file in Marked and redraw screen
    command! Marked silent !open -a "Marked.app" "%:p"
    nmap <silent> <leader>m :Marked<CR>\|:redraw!<CR>

    " Move up and down in autocomplete with <c-j> and <c-k>
    inoremap <expr> <c-j> ("\<C-n>")
    inoremap <expr> <c-k> ("\<C-p>")

    map <silent> <F5> :if &background == 'light'<Bar>
          \set background=dark<Bar>
          \else <Bar>
          \set background=light <Bar>
          \endif<cr>

    " Populate arguments with results from quickfix list
    " Source: http://stackoverflow.com/a/5686810
    command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
    function! QuickfixFilenames()
      " Building a hash ensures we get each buffer only once
      let buffer_numbers = {}
      for quickfix_item in getqflist()
        let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
      endfor
      return join(values(buffer_numbers))
    endfunction

    " function! ToggleErrors()
    "   if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
    "     " No location/quickfix list shown, open syntastic error location panel
    "     Errors
    "   else
    "     lclose
    "   endif
    " endfunction
    " nnoremap <silent> <C-e> :<C-u>call ToggleErrors()<CR>

" }

" Unite {

  " Grep
  nnoremap <silent><Leader>a  :Unite -silent -no-quit grep:.<CR>
  nnoremap <silent><Leader>A  :UniteWithCursorWord -silent -no-quit grep:.<CR>

  " MRU
  nnoremap <silent><Leader>m  :Unite -silent file_mru<CR>

  " Files
  nnoremap <silent><Leader>o  :Unite -silent -start-insert file<CR>
  nnoremap <silent><Leader>O  :Unite -silent -start-insert file_rec/async<CR>
  nnoremap <C-P>              :Unite -buffer-name=files -silent -start-insert file_rec/async<CR>

  " Buffers
  nnoremap <silent><Leader>b  :Unite -silent buffer<CR>
  " Buffer search
  nnoremap <silent><Leader>f  :Unite -silent -split -start-insert -auto-preview buffer<CR>

  " Yank
  " nnoremap <silent><Leader>y  :Unite history/yank<CR>

  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  call unite#filters#sorter_default#use(['sorter_rank'])

  let g:unite_source_grep_max_candidates = 200

  call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep', 'ignore_pattern',
    \ join([
    \ '\.git/',
    \ 'bower_components/',
    \ 'node_modules/',
    \ ], '\|'))

  " Use ag over grep
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
    \ '-i --vimgrep --hidden --ignore ' .
    \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
		let g:unite_source_rec_async_command =
    \ ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
  endif

  let g:default_context = {
    \ 'winheight' : 15,
    \ 'update_time' : 200,
    \ 'prompt' : '>>> ',
    \ 'enable_start_insert' : 0,
    \ 'enable_short_source_names' : 0,
    \ 'marked_icon' : '✓',
    \ 'ignorecase' : 1,
    \ 'smartcase' : 1,
  \ }

  call unite#custom#profile('default', 'context', default_context)

  function! s:unite_settings()
    " let b:SuperTabDisabled=1
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    imap <silent><buffer><expr> <C-x> unite#do_action('split')
    imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

    nmap <buffer> <ESC> <Plug>(unite_exit)
  endfunction

" }

" neomru.vim {

  let g:neomru#file_mru_path = $HOME.'/.nvim/tmp/neomru/file'
  let g:neomru#directory_mru_path = $HOME.'/.nvim/tmp/neomru/directory'

" }

" GUI (MacVim) settings {

  if has('gui_running')
    set guioptions-=T           " remove the toolbar
    set lines=40                " 40 lines of text instead of 24,
    set linespace=2
  else
    "set term=builtin_ansi       " Make arrow and other keys work
  endif

" }

" MODELINE / NOTES {
" vim: set foldmarker={,} foldlevel=1 foldmethod=marker foldopen+=search:
"
"   Robin Pyon's VIM config
"
" }

" PLUGINS {

  " - Plugins are managed with vim-plug
  " - Make sure to use single quotes!

  " Specify a directory for plugins (for vim: ~/.vim/plugged)
  call plug#begin('~/.local/share/nvim/plugged')

  " 'Development' only
  Plug 'guns/xterm-color-table.vim'                 " Displays colors (:XtermColorTable)

  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'
  Plug 'Shougo/unite.vim'                           " Required for vimfiler
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}        " Required for deoplete

  Plug 'junegunn/fzf', { 'do': './install --bin' }  " Fuzzy finder
  Plug 'junegunn/fzf.vim'
  Plug 'tweekmonster/fzf-filemru'                   " FZF MRU plugin

  Plug 'chriskempson/base16-vim'                    " Base 16 color theme
  Plug 'sheerun/vim-polyglot'                       " Syntax and indent support for most languages
  Plug 'w0rp/ale'                                   " Async linting
  Plug 'danro/rename.vim'
  Plug 'bling/vim-airline'                          " Statusbar
  Plug 'dkprice/vim-easygrep'
  Plug 'easymotion/vim-easymotion'
  Plug 'editorconfig/editorconfig-vim'              " .editorconfig support
  Plug 'ervandew/supertab'
  Plug 'jeffkreeftmeijer/vim-numbertoggle'          " Toggle between relative / absolute line numbers depending on context
  Plug 'jiangmiao/auto-pairs'
  Plug 'justinmk/vim-gtfo'                          " Go to terminal or file manager
  Plug 'justinmk/vim-sneak'
  Plug 'kshenoy/vim-signature'
  Plug 'mattn/emmet-vim'                            " Emmet support
  Plug 'mhinz/vim-signify'
  Plug 'mileszs/ack.vim'
  Plug 'osyo-manga/vim-anzu'
  Plug 'takac/vim-hardtime'                         " Limit movement keys
  Plug 'tommcdo/vim-exchange'
  Plug 'tomtom/tcomment_vim'                        " File type specific comments
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'                         " Git wrapper
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'                         " Surround key mappings
  Plug 'tpope/vim-unimpaired'
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }     " Autocompletion
  Plug 'Shougo/vimfiler.vim'                        " File explorer
  Plug 'SirVer/ultisnips'                           " Snippets
  Plug 'vim-airline/vim-airline-themes'             " (Requires vim-airline) Color themes
  Plug 'schickling/vim-bufonly'                     " Close all buffers except the current one

  " Filetype plugins:
  Plug 'tikhomirov/vim-glsl'                        " GLSL (syntax)
  Plug 'mxw/vim-jsx'                                " React JSX (syntax + indenting)
  Plug 'posva/vim-vue'                              " Vue (syntax)
  Plug 'stephpy/vim-yaml'                           " YAML (syntax) - faster than VIM core's syntax

  " Unused:
  " Plug 'evanmiller/nginx-vim-syntax'               " Nginx (syntax)
  " Plug 'pangloss/vim-javascript'                   " JavaScript (synax + indenting)
  " Plug 'chrisbra/Colorizer'
  " Plug 'rstacruz/vim-hyperstyle'
  " Plug 'milkypostman/vim-togglelist'
  " - Dash:
  " Plug 'rizzatti/dash.vim'
  " - Tags:
  " Plug 'majutsushi/tagbar'
  " Plug 'xolox/vim-misc'
  " Plug 'xolox/vim-easytags'
  " Plug 'marijnh/tern_for_vim'
  " Plug 'szw/vim-tags'

  " Initialize plugin system
  call plug#end()

" }

" Requires neovim > 0.1.5 and Vim > patch 7.4.1799
if (has("termguicolors"))
  set termguicolors
endif


" GENERAL {

  filetype plugin indent on           " automatically detect file types
  set noerrorbells                    " disable error bells
  set vb t_vb=                        " disable visual / audio bells for non error events (e.g. pressing ESC, edge scrolling)
  set shm+=I                          " hide startup message
  set synmaxcol=200                   " limit highlighting so vim doesn't choke on minified files

  set foldmethod=indent

  " Source .vimrc when saved
  " au BufWritePost .vimrc source ~/.vimrc
  augroup myvimrchooks
    au!
    au BufWritePost .vimrc,.vimrc.symlink source $MYVIMRC

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
  augroup END
" }

" UI {

  " Colors
  syntax on                           " enable syntax highlighting
  set background=dark                 " assume a dark background

  " Folding
  set foldenable                      " enable folding
  set foldlevelstart=10               " open most folds by default
  " set foldmethod=indent
  set foldnestmax=3                   " limit nested fold levels
  set foldopen+=search,undo           " open folds on specific commands

  " Indenting + Word wrap
  set linebreak                       " only wrap at word boundaries
  set shiftwidth=2                    " number of spaces to use for autoindenting
  set smartindent                     " automatically inserts indentation in some cases
  set wrap                            " wrap visually, rather than changing text in the buffer

  " Search
  set ignorecase                      " case insensitive search if search is all lowercase
  set smartcase                       " case sensitive search if search contains uppercase characters

  " Spaces & Tabs
  set expandtab                       " use spaces in place of tab characters
  set softtabstop=2                   " number of spaces to use when pressing <tab> and pressing backspace
  set tabstop=2                       " the width of a tab in spaces

  " Splits
  set splitright                      " new horizontal splits on the right
  set splitbelow                      " new vertical splits on the bottom

  " TODO: organize
  set clipboard=unnamed               " use system clipboard as default register
  set colorcolumn=85                  " draw vertical colored column"
  set cpoptions+=$
  " set cursorline                      " highlight current line (can be very slow)
  set diffopt=vertical                " default vimdiff to vertical split
  set listchars=tab:▸\ ,eol:¬         " set custom characters for non printable elements
  set number                          " show line numbers
  set nolist                          " hide hidden characters
  set relativenumber                  " show relative line numbers
  set showmatch                       " highlight matching parentheses
  set textwidth=0
  set wildignore=*~,.git,tmp,*.log
  set wildmode=list:longest,full

  " Change cursor type when entering and exiting insert mode
  if has('cursorshape')
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
" }

" AUTOGROUPS {

  augroup configgroup

    " Clear autocommands for current group
    au!

    " Arduino
    au BufRead,BufNewFile *.ino,*.pde set filetype=cpp

    " Crontab
    au FileType crontab set nobackup nowritebackup

    " GLSL
    au BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl,*.vshader,*.fshader setf glsl

    " HAML
    au BufRead,BufNewFile *.hamlc set ft=haml

    " HTML
    au BufRead,BufNewFile *.hbs setf html

    " JavaScript
    au BufRead,BufNewFile *.ejs,*.es6,*.json setf javascript

    " Ruby
    au BufEnter,BufRead,BufNewFile *.json.rabl,*.rabl,*.json_builder,*.assetfile,Rakefile,Assetfile,Guardfile setf ruby

    " Vue
    " au BufRead,BufNewFile *.vue setf vue

    " .htaccess
    au BufNewFile,BufRead .htaccess setf apache

    " On save: remove trailing whitespaces and ^M chars
    au FileType c,cpp,java,php,javascript,python,twig,xml,yml au BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

  augroup END

" }

" MAPPINGS {

  let mapleader = ","                 " change the mapleader from \ to ,

  nnoremap <space> :

  " Easy navigation between windows
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l

  " Buffer navigation
  nnoremap <C-j> :bprevious<CR>
  nnoremap <C-k> :bnext<CR>
  nnoremap <C-c> :Bdelete<CR>

  " Wrapped lines goes down/up to next row, rather than next line in file.
  nnoremap j gj
  nnoremap k gk

  " Properly interpret arrow keys when run within a tmux session
  if &term =~ '^screen'
      execute "set <xUp>=\e[1;*A"
      execute "set <xDown>=\e[1;*B"
      execute "set <xRight>=\e[1;*C"
      execute "set <xLeft>=\e[1;*D"
  endif

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  " Use tidy when using the = operator
  " http://vim.wikia.com/wiki/Cleanup_your_HTML#Using_tidy_for_html_files
  " TODO: what is setlocal?
  " :setlocal equalprg=tidyp\ -indent\ -quiet\ --indent-spaces\ 4\ --show-body-only\ 1\ --show-errors\ 0\ --tidy-mark\ 0\ --wrap\ 0

  " Easy access to commonly accessed rc files
  nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
  nnoremap <silent> <leader>ez :e ~/.zshrc<CR>

  " Close buffer but don't close split
  nmap <leader>d :b#<bar>bd#<CR>

  " Toggle display of invisible / non-printable characters
  nnoremap <silent> <leader>i :set list!<CR>

  " Preserve indentation while pasting text from the OS X clipboard
  noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

  " Search and replace word at cursor
  nnoremap <leader>s :%s/\<<C-r><C-w>\>/

  " Open location window
  nmap <Leader><Space>o :lopen<CR>
  " Close location window
  nmap <Leader><Space>c :lclose<CR>
  " Close all location windows
  " nmap <Leader><Space>c :windo if &buftype == "quickfix" || &buftype == "locationlist" | lclose | endif<CR>
  " Go to current error/warning
  nmap <Leader><Space>, :ll<CR>
  " Next error/warning
  nmap <Leader><Space>n :lnext<CR>
  " Previous error/warning
  nmap <Leader><Space>p :lprev<CR>

  " Tidy visually selected lines (indenting, quiet mode, no logging)
  " http://vim.wikia.com/wiki/Cleanup_your_HTML
  " vnoremap <leader>t :!tidy -q -i --show-errors 0<CR>

  vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

  " Yank text to the OS X clipboard
  noremap <leader>y "*y
  noremap <leader>yy "*Y

  " Clearing highlighted search
  nmap <silent> <leader>/ :nohlsearch<CR>

  " Enable shift-tab to outdent in normal and insert mode
  nmap <S-Tab> <<
  imap <S-Tab> <Esc><<i

  " Allow in/exdenting with tab and single angled quotes, while retaining visual selection
  vnoremap > >gv
  vnoremap < <gv
  vnoremap <Tab> >gv
  vnoremap <S-Tab> <gv

  " Move up and down in autocomplete with <c-j> and <c-k>
  inoremap <expr> <c-j> ("\<C-n>")
  inoremap <expr> <c-k> ("\<C-p>")

  map <silent> <F5> :if &background == 'light'<Bar>
        \set background=dark<Bar>
        \else <Bar>
        \set background=light <Bar>
        \endif<cr>

  " Grep
  nnoremap <Leader>a          :Ack!<Space>
  nnoremap <silent><Leader>A  :Ack!<CR>
  nnoremap <C-A>              :Ag<CR>

  " MRU
  nnoremap <silent><Leader>m  :ProjectMru<CR>

  " Files
  nnoremap <C-P>              :FZF<CR>

  " Buffers
  nnoremap <C-B>              :Buffers<CR>
" }

" COMMANDS {

  " Close all open buffers
  command! Bda bufdo bd

  " Open current file in Marked and redraw screen
  command! Marked silent !open -a "Marked.app" "%:p"

" }
